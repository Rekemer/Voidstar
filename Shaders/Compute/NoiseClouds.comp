#version 450

layout(set = 0, binding = 0) uniform UniformBufferObject {
    mat4 view;
    mat4 proj;
    vec4 playerPos;
    float time;
    
} ubo;
// 1 - static noise for terrain,
// 2 -  dynamic noise for water rendering
//layout(set = 1, binding = 0, rgba8) uniform writeonly image2D[2] storageImage;
layout(set=1,binding = 2) uniform NoiseData {

    float frequence ;
	float amplitude ;
	float octaves ;
	float multipler;
	float exponent ;
	float scale;

    float normalStrength ;
	float waterScale;
    
} noiseData;
//   worley noise for clouds
layout(set = 1, binding =3 , rgba8) uniform writeonly image3D worleyNoiseImage;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;







// value noise
float random (vec2 st) {
    return fract(sin(2*ubo.time*dot(st.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}
float noise (  vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

	// smooth step function lol
    vec2 u = f * f * (3.0 - 2.0 * f);
    //u = vec2(1,1);

	//return u.x;
    float interpolated;


	float interpolatedX = mix(a, b, u.x);
	float interpolatedY = mix(c, d, u.x);
	interpolated = mix(interpolatedX , interpolatedY , u.y);
	


    return interpolated;
}

// Simplex 2D noise
//
vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}


float fbm (in vec2 st) {
  // Initial values
    float value = 0.0;
    float amplitude = 1.;
    float frequency =5.;
    float normalization =0;
    float g= pow(2.0,-noiseData.amplitude);
    //
    // Loop of octaves
    for (int i = 0; i < noiseData.octaves; i++) {
        float noiseValue =  snoise(st);
        value += amplitude *noiseValue;
        normalization += amplitude;
        st *= noiseData.frequence;
        amplitude *= g;
    }


    value /= normalization;
    value = pow(value,noiseData.exponent);
    return value;
}

float fbm_time (in vec2 st) {
  // Initial values
    float value = 0.0;
    float amplitude = 1.;
    float frequency =5.;
    float normalization =0;
    float g= pow(2.0,-noiseData.amplitude);
    //
    // Loop of octaves
    for (int i = 0; i < noiseData.octaves; i++) {
        float noiseValue =  noise(st);
        value += amplitude *noiseValue;
        normalization += amplitude;
        st *= noiseData.frequence;
        amplitude *= g;
    }


    value /= normalization;
    value = pow(value,noiseData.exponent);
    return value;
}



void main() 
{
    ivec3 gridPos = ivec3(gl_GlobalInvocationID);
    imageStore(worleyNoiseImage, gridPos, vec4(1,0,1,1));
}
