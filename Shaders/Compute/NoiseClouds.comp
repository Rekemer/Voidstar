#version 450

layout(set = 0, binding = 0) uniform UniformBufferObject {
    mat4 view;
    mat4 proj;
    vec4 playerPos;
    float time;
    
} ubo;
layout(set=1,binding = 2) uniform NoiseData {

    float frequence ;
	float amplitude ;
	float octaves ;
	float multipler;
	float exponent ;
	float scale;

    float normalStrength;
	float waterScale;
    float waterDepth;
    float waterStrength;

    vec3 deepWaterColor;
    vec3 shallowWaterColor;


    float numCellsA;
    float numCellsB;
    float numCellsC;
    float persistence;
    
} noiseData;
//   worley noise for clouds
layout(set = 1, binding =3 , rgba8) uniform writeonly image3D worleyNoiseImage;
layout(std430, set = 1, binding =4) buffer StorageBuffer {
    vec3 points[];
};

#define LOCALSIZE 8
layout (local_size_x = LOCALSIZE, local_size_y = LOCALSIZE, local_size_z = LOCALSIZE) in;


vec3 random(vec3 st)
{
	float dotProduct1 = dot(st, vec3(127.1, 311.7, 23423.1));
    float dotProduct2 = dot(st, vec3(269.5, 183.3, 21.2));
    float dotProduct3 = dot(st, vec3(129.5, 383.3, 11.2));
    float dotProduct4 = dot(st, vec3(26.5, 83.3, 2.2));

    vec3 sinResult = sin(vec3(dotProduct1, dotProduct2,dotProduct3));
    vec3 multiplied = sinResult * 43758.5453;

    return fract(multiplied);
}
const ivec3 offsets[] =
{
    // centre
    ivec3(0,0,0),
    // front face
    ivec3(0,0,1),
    ivec3(-1,1,1),
    ivec3(-1,0,1),
    ivec3(-1,-1,1),
    ivec3(0,1,1),
    ivec3(0,-1,1),
    ivec3(1,1,1),
    ivec3(1,0,1),
    ivec3(1,-1,1),
    // back face
    ivec3(0,0,-1),
    ivec3(-1,1,-1),
    ivec3(-1,0,-1),
    ivec3(-1,-1,-1),
    ivec3(0,1,-1),
    ivec3(0,-1,-1),
    ivec3(1,1,-1),
    ivec3(1,0,-1),
    ivec3(1,-1,-1),
    // ring around centre
    ivec3(-1,1,0),
    ivec3(-1,0,0),
    ivec3(-1,-1,0),
    ivec3(0,1,0),
    ivec3(0,-1,0),
    ivec3(1,1,0),
    ivec3(1,0,0),
    ivec3(1,-1,0)
};

float maxComponent(vec3 vec) {
    return max(vec.x, max(vec.y, vec.z));
}

float minComponent(vec3 vec) {
    return min(vec.x, min(vec.y, vec.z));
}
vec2 random2( vec2 p ) {
    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
}
vec3 random3( vec3 p ) {
    return fract(sin(vec3(dot(p,vec3(127.1,311.7,54.1)),dot(p,vec3(269.5,183.3,21.7)),dot(p,vec3(721.1,113.7,45.1))))*43758.5453);
}
float worleyNoise(vec3 pos, float numcCells, vec3 seed) 
{
    ivec3 cellID = ivec3(floor(pos * float(numcCells)));
    vec3 i_st = vec3(cellID.xyz);
    vec3 f_st = fract(pos.xyz * numcCells);
    float layer = 100;
    for (int y = -1; y <= 1; y++) {
        for (int x = -1; x <= 1; x++) {
            for (int z = -1; z <= 1; z++) {
                vec3 neighbor = vec3(float(x), float(y), float(z));

                vec3 point = random3(mod(i_st + neighbor, numcCells) + seed);
                vec3 perturbation = random3(i_st + neighbor); // Add some perturbation

                // Calculate distance using Manhattan distance and perturbation
                vec3 diff = neighbor + point + perturbation - f_st;
                float dist = distance(diff, vec3(0.5)); // Manhattan distance
                layer = min(layer,dist);

            }
        }
    }
    return layer;
}
void main()
{

vec3 imageSize = vec3(64,64,64);
vec3 pos = vec3(gl_GlobalInvocationID) / imageSize;

float layer1 = worleyNoise(pos,floor(noiseData.numCellsA),vec3(0,1,0));
float layer2 = worleyNoise(pos,floor(noiseData.numCellsB),vec3(0,0,1));
float layer3 = worleyNoise(pos,floor(noiseData.numCellsC),vec3(1,1,1));


float persistence  = noiseData.persistence;
// Combine and rescale the layers to create final noise value
float worleyNoise = (layer1 + layer2 * pow(persistence,1) + layer3 *pow(persistence,2)) ;
float noiseSum = layer1 + (layer2 * persistence) + (layer3 * persistence * persistence);
float maxVal = 1 + (persistence) + (persistence * persistence);

    // keep inside range [0,1] as will be clamped in texture
    worleyNoise  /= maxVal;
   // worleyNoise = 1-worleyNoise;
   // noiseSum = 1 - noiseSum;
    layer3 = sqrt(layer3);
    layer3= 1-layer3;
    vec4 noiseValue = vec4(worleyNoise,worleyNoise,worleyNoise ,1);
    imageStore(worleyNoiseImage, ivec3(gl_GlobalInvocationID),noiseValue );
}





